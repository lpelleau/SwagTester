{
   "swagger":"2.0",
   "info":{
      "description":"Simple file",
      "version":"1.0.0",
      "title":"Swagger Petstore",
      "termsOfService":"http://swagger.io/terms/",
      "contact":{
         "email":"apiteam@swagger.io"
      },
      "license":{
         "name":"Apache 2.0",
         "url":"http://www.apache.org/licenses/LICENSE-2.0.html"
      }
   },
   "host":"petstore.swagger.io",
   "basePath":"/v2",
   "schemes":[
      "http"
   ],
   "paths":{
   	  "/demo/{pathValue}":{
   	  	"post":{
   	  		"parameters":[
   	  			{
                  "name":"pathValue",
                  "in":"path",
                  "description":"data in the path",
                  "required":true,
                  "type":"integer",
                  "format":"int64",
                  "minimum":10,
                  "maximum":25
               },
               {
                  "name":"stringFormData",
                  "in":"formData",
                  "description":"A string in the body",
                  "required":true,
                  "type":"string",
                  "minLength":5,
                  "maxLength":10
               },
               {
                  "name":"dateFormData",
                  "in":"formData",
                  "description":"A date in the body",
                  "required":true,
                  "type":"string",
                  "format":"date"
               },
               {
               	  "name":"numberQuery",
                  "in":"query",
                  "description":"A date in the body",
                  "required":true,
                  "type":"number",
                  "minimum":10,
                  "maximum":100
               },
               {
               	  "name":"enumQuery",
                  "in":"query",
                  "description":"A date in the body",
                  "required":true,
                  "type":"string",
                  "enum":[
                  	"valeur1",
                  	"valeur2",
                  	"valeur3"
                  ]
               }
   	  		],
   	  		"responses":{
   	  			"200":{
   	  				"description":"ok"
   	  			}
   	  		}
   	  	 }
   	  },
      "/pet":{
         "put":{
            "tags":[
               "pet"
            ],
            "summary":"Update an existing pet",
            "description":"",
            "operationId":"updatePet",
            "consumes":[
               "application/json",
               "application/xml"
            ],
            "produces":[
               "application/xml",
               "application/json"
            ],
            "parameters":[
               {
                  "in":"body",
                  "name":"body",
                  "description":"Pet object that needs to be added to the store",
                  "required":true,
                  "schema":{
                     "$ref":"#/definitions/Pet"
                  }
               }
            ],
            "responses":{
               "400":{
                  "description":"Invalid ID supplied"
               },
               "404":{
                  "description":"Pet not found"
               },
               "405":{
                  "description":"Validation exception"
               }
            }
         }
      },
      "/pet/findByStatus":{
         "get":{
            "tags":[
               "pet"
            ],
            "summary":"Finds Pets by status",
            "description":"Multiple status values can be provided with comma separated strings",
            "operationId":"findPetsByStatus",
            "produces":[
               "application/xml",
               "application/json"
            ],
            "parameters":[
               {
                  "name":"status",
                  "in":"query",
                  "description":"Status values that need to be considered for filter",
                  "required":true,
                  "type":"array",
                  "items":{
                     "type":"string",
                     "enum":[
                        "available",
                        "pending",
                        "sold"
                     ],
                     "default":"available"
                  },
                  "collectionFormat":"multi"
               }
            ],
            "responses":{
               "200":{
                  "description":"successful operation",
                  "schema":{
                     "type":"array",
                     "items":{
                        "$ref":"#/definitions/Pet"
                     }
                  }
               },
               "400":{
                  "description":"Invalid status value"
               }
            }
         }
      },         
      "/pet/{petId}/uploadImage":{
         "post":{
            "tags":[
               "pet"
            ],
            "summary":"uploads an image",
            "description":"",
            "operationId":"uploadFile",
            "consumes":[
               "multipart/form-data"
            ],
            "produces":[
               "application/json"
            ],
            "parameters":[
               {
                  "name":"petId",
                  "in":"path",
                  "description":"ID of pet to update",
                  "required":true,
                  "type":"integer",
                  "format":"int64"
               },
               {
                  "name":"additionalMetadata",
                  "in":"formData",
                  "description":"Additional data to pass to server",
                  "required":false,
                  "type":"string"
               },
               {
                  "name":"file",
                  "in":"formData",
                  "description":"file to upload",
                  "required":true,
                  "type":"file"
               }
            ],
            "responses":{
               "200":{
                  "description":"successful operation",
                  "schema":{
                     "$ref":"#/definitions/ApiResponse"
                  }
               }
            }
         }
      }
   },
   "definitions":{
      "Pet":{
         "type":"object",
         "required":[
            "name",
            "photoUrls"
         ],
         "properties":{
            "id":{
               "type":"integer",
               "format":"int64"
            },
            "category":{
               "$ref":"#/definitions/Category"
            },
            "name":{
               "type":"string",
               "example":"doggie"
            },
            "photoUrls":{
               "type":"array",
               "xml":{
                  "name":"photoUrl",
                  "wrapped":true
               },
               "items":{
                  "type":"string"
               }
            },
            "tags":{
               "type":"array",
               "xml":{
                  "name":"tag",
                  "wrapped":true
               },
               "items":{
                  "$ref":"#/definitions/Tag"
               }
            },
            "status":{
               "type":"string",
               "description":"pet status in the store",
               "enum":[
                  "available",
                  "pending",
                  "sold"
               ]
            }
         },
         "xml":{
            "name":"Pet"
         }
      },
      "ApiResponse":{
         "type":"object",
         "properties":{
            "code":{
               "type":"integer",
               "format":"int32"
            },
            "type":{
               "type":"string"
            },
            "message":{
               "type":"string"
            }
         }
      },
      "Category":{
         "type":"object",
         "properties":{
            "id":{
               "type":"integer",
               "format":"int64"
            },
            "name":{
               "type":"string"
            }
         },
         "xml":{
            "name":"Category"
         }
      },
      "Tag":{
         "type":"object",
         "properties":{
            "id":{
               "type":"integer",
               "format":"int64"
            },
            "name":{
               "type":"string"
            }
         },
         "xml":{
            "name":"Tag"
         }
      }
   }
}
